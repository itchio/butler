{
  "requests": [
    {
      "method": "Meta.Authenticate",
      "doc": "When using TCP transport, must be the first message sent",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "secret",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "ok",
            "doc": "",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Meta.Flow",
      "doc": "When called, defines the entire duration of the daemon's life.\n\nCancelling that conversation (or closing the TCP connection) will\nshut down the daemon after all other requests have finished. This\nallows gracefully switching to another daemon.\n\nThis conversation is also used to send all global notifications,\nregarding data that's fetched, network state, etc.\n\nNote that this call never returns - you have to cancel it when you're\ndone with the daemon.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Meta.Shutdown",
      "doc": "When called, gracefully shutdown the butler daemon.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Version.Get",
      "doc": "Retrieves the version of the butler instance the client\nis connected to.\n\nThis endpoint is meant to gather information when reporting\nissues, rather than feature sniffing. Conforming clients should\nautomatically download new versions of butler, see the **Updating** section.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "version",
            "doc": "Something short, like `v8.0.0`",
            "type": "string",
            "optional": false
          },
          {
            "name": "versionString",
            "doc": "Something long, like `v8.0.0, built on Aug 27 2017 @ 01:13:55, ref d833cc0aeea81c236c81dffb27bc18b2b8d8b290`",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Network.SetSimulateOffline",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "enabled",
            "doc": "If true, all operations after this point will behave\nas if there were no network connections",
            "type": "boolean",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Network.SetBandwidthThrottle",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "enabled",
            "doc": "If true, will limit. If false, will clear any bandwidth throttles in place",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "rate",
            "doc": "The target bandwidth, in kbps",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Profile.List",
      "doc": "Lists remembered profiles",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "profiles",
            "doc": "A list of remembered profiles",
            "type": "Profile[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.LoginWithPassword",
      "doc": "Add a new profile by password login",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "username",
            "doc": "The username (or e-mail) to use for login",
            "type": "string",
            "optional": false
          },
          {
            "name": "password",
            "doc": "The password to use",
            "type": "string",
            "optional": false
          },
          {
            "name": "forceRecaptcha",
            "doc": "Set to true if you want to force recaptcha",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "profile",
            "doc": "Information for the new profile, now remembered",
            "type": "Profile",
            "optional": false
          },
          {
            "name": "cookie",
            "doc": "Profile cookie for website",
            "type": "{ [key: string]: string }",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.LoginWithAPIKey",
      "doc": "Add a new profile by API key login. This can be used\nfor integration tests, for example. Note that no cookies\nare returned for this kind of login.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "apiKey",
            "doc": "The API token to use",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "profile",
            "doc": "Information for the new profile, now remembered",
            "type": "Profile",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.RequestCaptcha",
      "doc": "Ask the user to solve a captcha challenge\nSent during @@ProfileLoginWithPasswordParams if certain\nconditions are met.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "recaptchaUrl",
            "doc": "Address of page containing a recaptcha widget",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "recaptchaResponse",
            "doc": "The response given by recaptcha after it's been filled",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.RequestTOTP",
      "doc": "Ask the user to provide a TOTP token.\nSent during @@ProfileLoginWithPasswordParams if the user has\ntwo-factor authentication enabled.",
      "caller": "server",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "code",
            "doc": "The TOTP code entered by the user",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.UseSavedLogin",
      "doc": "Use saved login credentials to validate a profile.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "profile",
            "doc": "Information for the now validated profile",
            "type": "Profile",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.Forget",
      "doc": "Forgets a remembered profile - it won't appear in the\n@@ProfileListParams results anymore.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "success",
            "doc": "True if the profile did exist (and was successfully forgotten)",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Profile.Data.Put",
      "doc": "Stores some data associated to a profile, by key.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "key",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "value",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Profile.Data.Get",
      "doc": "Retrieves some data associated to a profile, by key.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "key",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "ok",
            "doc": "True if the value existed",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "value",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Search.Games",
      "doc": "Searches for games.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "query",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "games",
            "doc": "",
            "type": "Game[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Search.Users",
      "doc": "Searches for users.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "query",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "users",
            "doc": "",
            "type": "User[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Fetch.Game",
      "doc": "Fetches information for an itch.io game.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "gameId",
            "doc": "Identifier of game to look for",
            "type": "number",
            "optional": false
          },
          {
            "name": "fresh",
            "doc": "Force an API request",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "game",
            "doc": "Game info",
            "type": "Game",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Marks that a request should be issued afterwards with 'Fresh' set",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.GameRecords",
      "doc": "Fetches game records - owned, installed, in collection,\nwith search, etc. Includes download key info, cave info, etc.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile to use to fetch game",
            "type": "number",
            "optional": false
          },
          {
            "name": "source",
            "doc": "Source from which to fetch games",
            "type": "GameRecordsSource",
            "optional": false
          },
          {
            "name": "collectionId",
            "doc": "Collection ID, required if `Source` is \"collection\"",
            "type": "number",
            "optional": true
          },
          {
            "name": "limit",
            "doc": "Maximum number of games to return at a time",
            "type": "number",
            "optional": true
          },
          {
            "name": "offset",
            "doc": "Games to skip",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows game titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "Criterion to sort by",
            "type": "string",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filters",
            "type": "GameRecordsFilters",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "If set, will force fresh data",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "records",
            "doc": "All the records that were fetched",
            "type": "GameRecord[]",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Marks that a request should be issued afterwards with 'Fresh' set",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.DownloadKey",
      "doc": "Fetches a download key",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "downloadKeyId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "fresh",
            "doc": "Force an API request",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "downloadKey",
            "doc": "",
            "type": "DownloadKey",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Marks that a request should be issued afterwards with 'Fresh' set",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.DownloadKeys",
      "doc": "Fetches multiple download keys",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "offset",
            "doc": "Number of items to skip",
            "type": "number",
            "optional": true
          },
          {
            "name": "limit",
            "doc": "Max number of results per page (default = 5)",
            "type": "number",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filter results",
            "type": "FetchDownloadKeysFilter",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "Force an API request",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "All the download keys found in the local DB.",
            "type": "DownloadKey[]",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Whether the information was fetched from a stale cache,\nand could warrant a refresh if online.",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Fetch.GameUploads",
      "doc": "Fetches uploads for an itch.io game",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "gameId",
            "doc": "Identifier of the game whose uploads we should look for",
            "type": "number",
            "optional": false
          },
          {
            "name": "compatible",
            "doc": "Only returns compatible uploads",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "fresh",
            "doc": "Force an API request",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "uploads",
            "doc": "List of uploads",
            "type": "Upload[]",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Marks that a request should be issued\nafterwards with 'Fresh' set",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.User",
      "doc": "Fetches information for an itch.io user.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "userId",
            "doc": "Identifier of the user to look for",
            "type": "number",
            "optional": false
          },
          {
            "name": "profileId",
            "doc": "Profile to use to look upser",
            "type": "number",
            "optional": false
          },
          {
            "name": "fresh",
            "doc": "Force an API request",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "user",
            "doc": "User info",
            "type": "User",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "Marks that a request should be issued\nafterwards with 'Fresh' set",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.Sale",
      "doc": "Fetches the best current *locally cached* sale for a given\ngame.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "gameId",
            "doc": "Identifier of the game for which to look for a sale",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "sale",
            "doc": "",
            "type": "Sale",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.Collection",
      "doc": "Fetch a collection's title, gamesCount, etc.\nbut not its games.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile to use to fetch collection",
            "type": "number",
            "optional": false
          },
          {
            "name": "collectionId",
            "doc": "Collection to fetch",
            "type": "number",
            "optional": false
          },
          {
            "name": "fresh",
            "doc": "Force an API request before replying.\nUsually set after getting 'stale' in the response.",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "collection",
            "doc": "Collection info",
            "type": "Collection",
            "optional": false
          },
          {
            "name": "stale",
            "doc": "True if the info was from local DB and\nit should be re-queried using \"Fresh\"",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.Collection.Games",
      "doc": "Fetches information about a collection and the games it\ncontains.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile to use to fetch collection",
            "type": "number",
            "optional": false
          },
          {
            "name": "collectionId",
            "doc": "Identifier of the collection to look for",
            "type": "number",
            "optional": false
          },
          {
            "name": "limit",
            "doc": "Maximum number of games to return at a time.",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows game titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "Criterion to sort by",
            "type": "string",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filters",
            "type": "CollectionGamesFilters",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "cursor",
            "doc": "Used for pagination, if specified",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "If set, will force fresh data",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "Requested games for this collection",
            "type": "CollectionGame[]",
            "optional": false
          },
          {
            "name": "nextCursor",
            "doc": "Use to fetch the next 'page' of results",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "stale",
            "doc": "If true, re-issue request with 'Fresh'",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.ProfileCollections",
      "doc": "Lists collections for a profile. Does not contain\ngames.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile for which to fetch collections",
            "type": "number",
            "optional": false
          },
          {
            "name": "limit",
            "doc": "Maximum number of collections to return at a time.",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows collection titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "Criterion to sort by",
            "type": "string",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "cursor",
            "doc": "Used for pagination, if specified",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "If set, will force fresh data",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "Collections belonging to the profile",
            "type": "Collection[]",
            "optional": false
          },
          {
            "name": "nextCursor",
            "doc": "Used to fetch the next page",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "stale",
            "doc": "If true, re-issue request with \"Fresh\"",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.ProfileGames",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile for which to fetch games",
            "type": "number",
            "optional": false
          },
          {
            "name": "limit",
            "doc": "Maximum number of items to return at a time.",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows game titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "Criterion to sort by",
            "type": "string",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filters",
            "type": "ProfileGameFilters",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "cursor",
            "doc": "Used for pagination, if specified",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "If set, will force fresh data",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "Profile games",
            "type": "ProfileGame[]",
            "optional": false
          },
          {
            "name": "nextCursor",
            "doc": "Used to fetch the next page",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "stale",
            "doc": "If true, re-issue request with \"Fresh\"",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.ProfileOwnedKeys",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "profileId",
            "doc": "Profile to use to fetch game",
            "type": "number",
            "optional": false
          },
          {
            "name": "limit",
            "doc": "Maximum number of owned keys to return at a time.",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows game titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "Criterion to sort by",
            "type": "string",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filters",
            "type": "ProfileOwnedKeysFilters",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "cursor",
            "doc": "Used for pagination, if specified",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "fresh",
            "doc": "If set, will force fresh data",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "Download keys fetched for profile",
            "type": "DownloadKey[]",
            "optional": false
          },
          {
            "name": "nextCursor",
            "doc": "Used to fetch the next page",
            "type": "Cursor",
            "optional": true
          },
          {
            "name": "stale",
            "doc": "If true, re-issue request with \"Fresh\"",
            "type": "boolean",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.Commons",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "downloadKeys",
            "doc": "",
            "type": "DownloadKeySummary[]",
            "optional": false
          },
          {
            "name": "caves",
            "doc": "",
            "type": "CaveSummary[]",
            "optional": false
          },
          {
            "name": "installLocations",
            "doc": "",
            "type": "InstallLocationSummary[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Fetch.Caves",
      "doc": "Retrieve info for all caves.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "limit",
            "doc": "Maximum number of caves to return at a time.",
            "type": "number",
            "optional": true
          },
          {
            "name": "search",
            "doc": "When specified only shows game titles that contain this string",
            "type": "string",
            "optional": true
          },
          {
            "name": "sortBy",
            "doc": "",
            "type": "string",
            "optional": true
          },
          {
            "name": "filters",
            "doc": "Filters",
            "type": "CavesFilters",
            "optional": true
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "cursor",
            "doc": "Used for pagination, if specified",
            "type": "Cursor",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "items",
            "doc": "",
            "type": "Cave[]",
            "optional": false
          },
          {
            "name": "nextCursor",
            "doc": "Use to fetch the next 'page' of results",
            "type": "Cursor",
            "optional": true
          }
        ]
      }
    },
    {
      "method": "Fetch.Cave",
      "doc": "Retrieve info on a cave by ID.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "cave",
            "doc": "",
            "type": "Cave",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Fetch.ExpireAll",
      "doc": "Mark all local data as stale.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Game.FindUploads",
      "doc": "Finds uploads compatible with the current runtime, for a given game.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "game",
            "doc": "Which game to find uploads for",
            "type": "Game",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "uploads",
            "doc": "A list of uploads that were found to be compatible.",
            "type": "Upload[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Queue",
      "doc": "Queues an install operation to be later performed\nvia @@InstallPerformParams.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "ID of the cave to perform the install for.\nIf not specified, will create a new cave.",
            "type": "string",
            "optional": true
          },
          {
            "name": "reason",
            "doc": "If unspecified, will default to 'install'",
            "type": "DownloadReason",
            "optional": true
          },
          {
            "name": "installLocationId",
            "doc": "If CaveID is not specified, ID of an install location\nto install to.",
            "type": "string",
            "optional": true
          },
          {
            "name": "noCave",
            "doc": "If set, InstallFolder can be set and no cave\nrecord will be read or modified",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "installFolder",
            "doc": "When NoCave is set, exactly where to install",
            "type": "string",
            "optional": true
          },
          {
            "name": "game",
            "doc": "Which game to install.\n\nIf unspecified and caveId is specified, the same game will be used.",
            "type": "Game",
            "optional": true
          },
          {
            "name": "upload",
            "doc": "Which upload to install.\n\nIf unspecified and caveId is specified, the same upload will be used.",
            "type": "Upload",
            "optional": true
          },
          {
            "name": "build",
            "doc": "Which build to install\n\nIf unspecified and caveId is specified, the same build will be used.",
            "type": "Build",
            "optional": true
          },
          {
            "name": "ignoreInstallers",
            "doc": "If true, do not run windows installers, just extract\nwhatever to the install folder.",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "stagingFolder",
            "doc": "A folder that butler can use to store temporary files, like\npartial downloads, checkpoint files, etc.",
            "type": "string",
            "optional": true
          },
          {
            "name": "queueDownload",
            "doc": "If set, and the install operation is successfully disambiguated,\nwill queue it as a download for butler to drive.\nSee @@DownloadsDriveParams.",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "fastQueue",
            "doc": "Don't run install prepare (assume we can just run it at perform time)",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "id",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "reason",
            "doc": "",
            "type": "DownloadReason",
            "optional": false
          },
          {
            "name": "caveId",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "game",
            "doc": "",
            "type": "Game",
            "optional": false
          },
          {
            "name": "upload",
            "doc": "",
            "type": "Upload",
            "optional": false
          },
          {
            "name": "build",
            "doc": "",
            "type": "Build",
            "optional": false
          },
          {
            "name": "installFolder",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "stagingFolder",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "installLocationId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Plan",
      "doc": "For modal-first install",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "gameId",
            "doc": "The ID of the game we're planning to install",
            "type": "number",
            "optional": false
          },
          {
            "name": "downloadSessionId",
            "doc": "The download session ID to use for this install plan",
            "type": "string",
            "optional": true
          },
          {
            "name": "uploadId",
            "doc": "",
            "type": "number",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "game",
            "doc": "",
            "type": "Game",
            "optional": false
          },
          {
            "name": "uploads",
            "doc": "",
            "type": "Upload[]",
            "optional": false
          },
          {
            "name": "info",
            "doc": "",
            "type": "InstallPlanInfo",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Caves.SetPinned",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "ID of the cave to pin/unpin",
            "type": "string",
            "optional": false
          },
          {
            "name": "pinned",
            "doc": "Pinned state the cave should have after this call",
            "type": "boolean",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Install.CreateShortcut",
      "doc": "Create a shortcut for an existing cave .",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Install.Perform",
      "doc": "Perform an install that was previously queued via\n@@InstallQueueParams.\n\nCan be cancelled by passing the same `ID` to @@InstallCancelParams.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "id",
            "doc": "ID that can be later used in @@InstallCancelParams",
            "type": "string",
            "optional": false
          },
          {
            "name": "stagingFolder",
            "doc": "The folder turned by @@InstallQueueParams",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "caveId",
            "doc": "",
            "type": "string",
            "optional": false
          },
          {
            "name": "events",
            "doc": "",
            "type": "InstallEvent[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Cancel",
      "doc": "Attempt to gracefully cancel an ongoing operation.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "id",
            "doc": "The UUID of the task to cancel, as passed to @@OperationStartParams",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "didCancel",
            "doc": "",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Uninstall.Perform",
      "doc": "UninstallParams contains all the parameters needed to perform\nan uninstallation for a game via @@OperationStartParams.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "The cave to uninstall",
            "type": "string",
            "optional": false
          },
          {
            "name": "hard",
            "doc": "If true, don't attempt to run any uninstallers, just\nremove the DB record and burn the install folder to the ground.",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Install.VersionSwitch.Queue",
      "doc": "Prepare to queue a version switch. The client will\nreceive an @@InstallVersionSwitchPickParams.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "The cave to switch to a different version",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "InstallVersionSwitchPick",
      "doc": "Let the user pick which version to switch to.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "cave",
            "doc": "",
            "type": "Cave",
            "optional": false
          },
          {
            "name": "upload",
            "doc": "",
            "type": "Upload",
            "optional": false
          },
          {
            "name": "builds",
            "doc": "",
            "type": "Build[]",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "index",
            "doc": "A negative index aborts the version switch",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "PickUpload",
      "doc": "Asks the user to pick between multiple available uploads",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "uploads",
            "doc": "An array of upload objects to choose from",
            "type": "Upload[]",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "index",
            "doc": "The index (in the original array) of the upload that was picked,\nor a negative value to cancel.",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.List",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "installLocations",
            "doc": "",
            "type": "InstallLocationSummary[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.Add",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "id",
            "doc": "identifier of the new install location.\nif not specified, will be generated.",
            "type": "string",
            "optional": true
          },
          {
            "name": "path",
            "doc": "path of the new install location",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "installLocation",
            "doc": "",
            "type": "InstallLocationSummary",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.Remove",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "id",
            "doc": "identifier of the install location to remove",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Install.Locations.GetByID",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "id",
            "doc": "identifier of the install location to remove",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "installLocation",
            "doc": "",
            "type": "InstallLocationSummary",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.Scan",
      "doc": "",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "legacyMarketPath",
            "doc": "path to a legacy marketDB",
            "type": "string",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "numFoundItems",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "numImportedItems",
            "doc": "",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.Scan.ConfirmImport",
      "doc": "Sent at the end of @@InstallLocationsScanParams",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "numItems",
            "doc": "number of items that will be imported",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "confirm",
            "doc": "",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Queue",
      "doc": "Queue a download that will be performed later by\n@@DownloadsDriveParams.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "item",
            "doc": "",
            "type": "InstallQueueResult",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Downloads.Prioritize",
      "doc": "Put a download on top of the queue.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "downloadId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Downloads.List",
      "doc": "List all known downloads.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "downloads",
            "doc": "",
            "type": "Download[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.ClearFinished",
      "doc": "Removes all finished downloads from the queue.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Downloads.Drive",
      "doc": "Drive downloads, which is: perform them one at a time,\nuntil they're all finished.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Downloads.Drive.Cancel",
      "doc": "Stop driving downloads gracefully.",
      "caller": "client",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "didCancel",
            "doc": "",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Retry",
      "doc": "Retries a download that has errored",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "downloadId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Downloads.Discard",
      "doc": "Attempts to discard a download",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "downloadId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "CheckUpdate",
      "doc": "Looks for game updates.\n\nIf a list of cave identifiers is passed, will only look for\nupdates for these caves *and will ignore snooze*.\n\nOtherwise, will look for updates for all games, respecting snooze.\n\nUpdates found are regularly sent via @@GameUpdateAvailableNotification, and\nthen all at once in the result.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveIds",
            "doc": "If specified, will only look for updates to these caves",
            "type": "string[]",
            "optional": true
          },
          {
            "name": "verbose",
            "doc": "If specified, will log information even when we have no warnings/errors",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "updates",
            "doc": "Any updates found (might be empty)",
            "type": "GameUpdate[]",
            "optional": false
          },
          {
            "name": "warnings",
            "doc": "Warnings messages logged while looking for updates",
            "type": "string[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "SnoozeCave",
      "doc": "Snoozing a cave means we ignore all new uploads (that would\nbe potential updates) between the cave's last install operation\nand now.\n\nThis can be undone by calling @@CheckUpdateParams with this specific\ncave identifier.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "Launch",
      "doc": "Attempt to launch an installed game.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "caveId",
            "doc": "The ID of the cave to launch",
            "type": "string",
            "optional": false
          },
          {
            "name": "prereqsDir",
            "doc": "The directory to use to store installer files for prerequisites",
            "type": "string",
            "optional": false
          },
          {
            "name": "forcePrereqs",
            "doc": "Force installing all prerequisites, even if they're already marked as installed",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "sandbox",
            "doc": "Enable sandbox (regardless of manifest opt-in)",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "AcceptLicense",
      "doc": "Sent during @@LaunchParams if the game/application comes with a service license\nagreement.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "text",
            "doc": "The full text of the license agreement, in its default\nlanguage, which is usually English.",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "accept",
            "doc": "true if the user accepts the terms of the license, false otherwise.\nNote that false will cancel the launch.",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "PickManifestAction",
      "doc": "Sent during @@LaunchParams, ask the user to pick a manifest action to launch.\n\nSee [itch app manifests](https://itch.io/docs/itch/integrating/manifest.html).",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "actions",
            "doc": "A list of actions to pick from. Must be shown to the user in the order they're passed.",
            "type": "Action[]",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "index",
            "doc": "Index of action picked by user, or negative if aborting",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "ShellLaunch",
      "doc": "Ask the client to perform a shell launch, ie. open an item\nwith the operating system's default handler (File explorer).\n\nSent during @@LaunchParams.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "itemPath",
            "doc": "Absolute path of item to open, e.g. `D:\\\\Games\\\\Itch\\\\garden\\\\README.txt`",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "HTMLLaunch",
      "doc": "Ask the client to perform an HTML launch, ie. open an HTML5\ngame, ideally in an embedded browser.\n\nSent during @@LaunchParams.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "rootFolder",
            "doc": "Absolute path on disk to serve",
            "type": "string",
            "optional": false
          },
          {
            "name": "indexPath",
            "doc": "Path of index file, relative to root folder",
            "type": "string",
            "optional": false
          },
          {
            "name": "args",
            "doc": "Command-line arguments, to pass as `global.Itch.args`",
            "type": "string[]",
            "optional": false
          },
          {
            "name": "env",
            "doc": "Environment variables, to pass as `global.Itch.env`",
            "type": "{ [key: string]: string }",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "URLLaunch",
      "doc": "Ask the client to perform an URL launch, ie. open an address\nwith the system browser or appropriate.\n\nSent during @@LaunchParams.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "url",
            "doc": "URL to open, e.g. `https://itch.io/community`",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "AllowSandboxSetup",
      "doc": "Ask the user to allow sandbox setup. Will be followed by\na UAC prompt (on Windows) or a pkexec dialog (on Linux) if\nthe user allows.\n\nSent during @@LaunchParams.",
      "caller": "server",
      "params": {
        "fields": null
      },
      "result": {
        "fields": [
          {
            "name": "allow",
            "doc": "Set to true if user allowed the sandbox setup, false otherwise",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "PrereqsFailed",
      "doc": "Sent during @@LaunchParams, when one or more prerequisites have failed to install.\nThe user may choose to proceed with the launch anyway.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "error",
            "doc": "Short error",
            "type": "string",
            "optional": false
          },
          {
            "name": "errorStack",
            "doc": "Longer error (to include in logs)",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "continue",
            "doc": "Set to true if the user wants to proceed with the launch in spite of the prerequisites failure",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "CleanDownloads.Search",
      "doc": "Look for folders we can clean up in various download folders.\nThis finds anything that doesn't correspond to any current downloads\nwe know about.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "roots",
            "doc": "A list of folders to scan for potential subfolders to clean up",
            "type": "string[]",
            "optional": false
          },
          {
            "name": "whitelist",
            "doc": "A list of subfolders to not consider when cleaning\n(staging folders for in-progress downloads)",
            "type": "string[]",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "entries",
            "doc": "Entries we found that could use some cleaning (with path and size information)",
            "type": "CleanDownloadsEntry[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "CleanDownloads.Apply",
      "doc": "Remove the specified entries from disk, freeing up disk space.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "entries",
            "doc": "",
            "type": "CleanDownloadsEntry[]",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": null
      }
    },
    {
      "method": "System.StatFS",
      "doc": "Get information on a filesystem.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "path",
            "doc": "",
            "type": "string",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "freeSize",
            "doc": "",
            "type": "number",
            "optional": false
          },
          {
            "name": "totalSize",
            "doc": "",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Test.DoubleTwice",
      "doc": "Test request: asks butler to double a number twice.\nFirst by calling @@TestDoubleParams, then by\nreturning the result of that call doubled.\n\nUse that to try out your JSON-RPC 2.0 over TCP implementation.",
      "caller": "client",
      "params": {
        "fields": [
          {
            "name": "number",
            "doc": "The number to quadruple",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "number",
            "doc": "The input, quadrupled",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Test.Double",
      "doc": "Test request: return a number, doubled. Implement that to\nuse @@TestDoubleTwiceParams in your testing.",
      "caller": "server",
      "params": {
        "fields": [
          {
            "name": "number",
            "doc": "The number to double",
            "type": "number",
            "optional": false
          }
        ]
      },
      "result": {
        "fields": [
          {
            "name": "number",
            "doc": "The number, doubled",
            "type": "number",
            "optional": false
          }
        ]
      }
    }
  ],
  "notifications": [
    {
      "method": "Downloads.Drive.Progress",
      "doc": "",
      "params": {
        "fields": [
          {
            "name": "download",
            "doc": "",
            "type": "Download",
            "optional": false
          },
          {
            "name": "progress",
            "doc": "",
            "type": "DownloadProgress",
            "optional": false
          },
          {
            "name": "speedHistory",
            "doc": "BPS values for the last minute",
            "type": "number[]",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Drive.Started",
      "doc": "",
      "params": {
        "fields": [
          {
            "name": "download",
            "doc": "",
            "type": "Download",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Drive.Errored",
      "doc": "",
      "params": {
        "fields": [
          {
            "name": "download",
            "doc": "The download that errored. It contains all the error\ninformation: a short message, a full stack trace,\nand a butlerd error code.",
            "type": "Download",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Drive.Finished",
      "doc": "",
      "params": {
        "fields": [
          {
            "name": "download",
            "doc": "",
            "type": "Download",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Drive.Discarded",
      "doc": "",
      "params": {
        "fields": [
          {
            "name": "download",
            "doc": "",
            "type": "Download",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Downloads.Drive.NetworkStatus",
      "doc": "Sent during @@DownloadsDriveParams to inform on network\nstatus changes.",
      "params": {
        "fields": [
          {
            "name": "status",
            "doc": "The current network status",
            "type": "NetworkStatus",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Log",
      "doc": "Sent any time butler needs to send a log message. The client should\nrelay them in their own stdout / stderr, and collect them so they\ncan be part of an issue report if something goes wrong.",
      "params": {
        "fields": [
          {
            "name": "level",
            "doc": "Level of the message (`info`, `warn`, etc.)",
            "type": "LogLevel",
            "optional": false
          },
          {
            "name": "message",
            "doc": "Contents of the message.\n\nNote: logs may contain non-ASCII characters, or even emojis.",
            "type": "string",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "MetaFlowEstablished",
      "doc": "The first notification sent when @@MetaFlowParams is called.",
      "params": {
        "fields": [
          {
            "name": "pid",
            "doc": "The identifier of the daemon process for which the flow was established",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Progress",
      "doc": "Sent periodically during @@InstallPerformParams to inform on the current state of an install",
      "params": {
        "fields": [
          {
            "name": "progress",
            "doc": "An overall progress value between 0 and 1",
            "type": "number",
            "optional": false
          },
          {
            "name": "eta",
            "doc": "Estimated completion time for the operation, in seconds (floating)",
            "type": "number",
            "optional": false
          },
          {
            "name": "bps",
            "doc": "Network bandwidth used, in bytes per second (floating)",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "TaskStarted",
      "doc": "Each operation is made up of one or more tasks. This notification\nis sent during @@OperationStartParams whenever a specific task starts.",
      "params": {
        "fields": [
          {
            "name": "reason",
            "doc": "Why this task was started",
            "type": "TaskReason",
            "optional": false
          },
          {
            "name": "type",
            "doc": "Is this task a download? An install?",
            "type": "TaskType",
            "optional": false
          },
          {
            "name": "game",
            "doc": "The game this task is dealing with",
            "type": "Game",
            "optional": false
          },
          {
            "name": "upload",
            "doc": "The upload this task is dealing with",
            "type": "Upload",
            "optional": false
          },
          {
            "name": "build",
            "doc": "The build this task is dealing with (if any)",
            "type": "Build",
            "optional": false
          },
          {
            "name": "totalSize",
            "doc": "Total size in bytes",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "TaskSucceeded",
      "doc": "Sent during @@OperationStartParams whenever a task succeeds for an operation.",
      "params": {
        "fields": [
          {
            "name": "type",
            "doc": "",
            "type": "TaskType",
            "optional": false
          },
          {
            "name": "installResult",
            "doc": "If the task installed something, then this contains\ninfo about the game, upload, build that were installed",
            "type": "InstallResult",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "Install.Locations.Scan.Yield",
      "doc": "Sent during @@InstallLocationsScanParams whenever\na game is found.",
      "params": {
        "fields": [
          {
            "name": "game",
            "doc": "",
            "type": "Game",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "GameUpdateAvailable",
      "doc": "Sent during @@CheckUpdateParams, every time butler\nfinds an update for a game. Can be safely ignored if displaying\nupdates as they are found is not a requirement for the client.",
      "params": {
        "fields": [
          {
            "name": "update",
            "doc": "",
            "type": "GameUpdate",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "LaunchRunning",
      "doc": "Sent during @@LaunchParams, when the game is configured, prerequisites are installed\nsandbox is set up (if enabled), and the game is actually running.",
      "params": {
        "fields": null
      }
    },
    {
      "method": "LaunchExited",
      "doc": "Sent during @@LaunchParams, when the game has actually exited.",
      "params": {
        "fields": null
      }
    },
    {
      "method": "PrereqsStarted",
      "doc": "Sent during @@LaunchParams, when some prerequisites are about to be installed.\n\nThis is a good time to start showing a UI element with the state of prereq\ntasks.\n\nUpdates are regularly provided via @@PrereqsTaskStateNotification.",
      "params": {
        "fields": [
          {
            "name": "tasks",
            "doc": "A list of prereqs that need to be tended to",
            "type": "{ [key: string]: PrereqTask }",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "PrereqsTaskState",
      "doc": "Current status of a prerequisite task\n\nSent during @@LaunchParams, after @@PrereqsStartedNotification, repeatedly\nuntil all prereq tasks are done.",
      "params": {
        "fields": [
          {
            "name": "name",
            "doc": "Short name of the prerequisite task (e.g. `xna-4.0`)",
            "type": "string",
            "optional": false
          },
          {
            "name": "status",
            "doc": "Current status of the prereq",
            "type": "PrereqStatus",
            "optional": false
          },
          {
            "name": "progress",
            "doc": "Value between 0 and 1 (floating)",
            "type": "number",
            "optional": false
          },
          {
            "name": "eta",
            "doc": "ETA in seconds (floating)",
            "type": "number",
            "optional": false
          },
          {
            "name": "bps",
            "doc": "Network bandwidth used in bytes per second (floating)",
            "type": "number",
            "optional": false
          }
        ]
      }
    },
    {
      "method": "PrereqsEnded",
      "doc": "Sent during @@LaunchParams, when all prereqs have finished installing (successfully or not)\n\nAfter this is received, it's safe to close any UI element showing prereq task state.",
      "params": {
        "fields": null
      }
    }
  ],
  "structTypes": [
    {
      "name": "LaunchTarget",
      "doc": "",
      "fields": [
        {
          "name": "action",
          "doc": "The manifest action corresponding to this launch target.\nFor implicit launch targets, a minimal one will be generated.",
          "type": "Action",
          "optional": false
        },
        {
          "name": "host",
          "doc": "Host this launch target was found for",
          "type": "Host",
          "optional": false
        },
        {
          "name": "strategy",
          "doc": "Detailed launch strategy",
          "type": "StrategyResult",
          "optional": false
        }
      ]
    },
    {
      "name": "Profile",
      "doc": "Represents a user for which we have profile information,\nie. that we can connect as, etc.",
      "fields": [
        {
          "name": "id",
          "doc": "itch.io user ID, doubling as profile ID",
          "type": "number",
          "optional": false
        },
        {
          "name": "lastConnected",
          "doc": "Timestamp the user last connected at (to the client)",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "user",
          "doc": "User information",
          "type": "User",
          "optional": false
        }
      ]
    },
    {
      "name": "GameRecord",
      "doc": "",
      "fields": [
        {
          "name": "id",
          "doc": "Game ID",
          "type": "number",
          "optional": false
        },
        {
          "name": "title",
          "doc": "Game title",
          "type": "string",
          "optional": false
        },
        {
          "name": "cover",
          "doc": "Game cover",
          "type": "string",
          "optional": false
        },
        {
          "name": "owned",
          "doc": "True if owned",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "installedAt",
          "doc": "Non-nil if installed (has caves)",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "GameRecordsFilters",
      "doc": "",
      "fields": [
        {
          "name": "classification",
          "doc": "",
          "type": "GameClassification",
          "optional": true
        },
        {
          "name": "installed",
          "doc": "",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "owned",
          "doc": "",
          "type": "boolean",
          "optional": true
        }
      ]
    },
    {
      "name": "FetchDownloadKeysFilter",
      "doc": "",
      "fields": [
        {
          "name": "gameId",
          "doc": "Return only download keys for given game",
          "type": "number",
          "optional": true
        }
      ]
    },
    {
      "name": "CollectionGamesFilters",
      "doc": "",
      "fields": [
        {
          "name": "installed",
          "doc": "",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "classification",
          "doc": "",
          "type": "GameClassification",
          "optional": false
        }
      ]
    },
    {
      "name": "ProfileGameFilters",
      "doc": "",
      "fields": [
        {
          "name": "visibility",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "paidStatus",
          "doc": "",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "ProfileGame",
      "doc": "",
      "fields": [
        {
          "name": "game",
          "doc": "",
          "type": "Game",
          "optional": false
        },
        {
          "name": "viewsCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "downloadsCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "purchasesCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "published",
          "doc": "",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "ProfileOwnedKeysFilters",
      "doc": "",
      "fields": [
        {
          "name": "installed",
          "doc": "",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "classification",
          "doc": "",
          "type": "GameClassification",
          "optional": false
        }
      ]
    },
    {
      "name": "DownloadKeySummary",
      "doc": "",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "gameId",
          "doc": "Identifier of the game to which this download key grants access",
          "type": "number",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date this key was created at (often coincides with purchase time)",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "CaveSummary",
      "doc": "",
      "fields": [
        {
          "name": "id",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "gameId",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "lastTouchedAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "secondsRun",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "installedSize",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "Cave",
      "doc": "A Cave corresponds to an \"installed item\" for a game.\n\nIt maps one-to-one with an upload. There might be 0, 1, or several\ncaves for a given game. Multiple caves for a single game is a rare-ish\ncase (single-page bundles, bonus content) but one that should be handled.",
      "fields": [
        {
          "name": "id",
          "doc": "Unique identifier of this cave (UUID)",
          "type": "string",
          "optional": false
        },
        {
          "name": "game",
          "doc": "Game that's installed in this cave",
          "type": "Game",
          "optional": false
        },
        {
          "name": "upload",
          "doc": "Upload that's installed in this cave",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "Build that's installed in this cave, if the upload is wharf-powered",
          "type": "Build",
          "optional": true
        },
        {
          "name": "stats",
          "doc": "Stats about cave usage and first install",
          "type": "CaveStats",
          "optional": false
        },
        {
          "name": "installInfo",
          "doc": "Information about where the cave is installed, how much space it takes up etc.",
          "type": "CaveInstallInfo",
          "optional": false
        }
      ]
    },
    {
      "name": "CaveStats",
      "doc": "CaveStats contains stats about cave usage and first install",
      "fields": [
        {
          "name": "installedAt",
          "doc": "Time the cave was first installed",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "lastTouchedAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "secondsRun",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "CaveInstallInfo",
      "doc": "CaveInstallInfo contains information about where the cave is installed, how\nmuch space it takes up, etc.",
      "fields": [
        {
          "name": "installedSize",
          "doc": "Size the cave takes up - or at least, size it took up when we finished\ninstalling it. Does not include files generated by the game in the install folder.",
          "type": "number",
          "optional": false
        },
        {
          "name": "installLocation",
          "doc": "Name of the install location for this cave. This may change if the cave\nis moved.",
          "type": "string",
          "optional": false
        },
        {
          "name": "installFolder",
          "doc": "Absolute path to the install folder",
          "type": "string",
          "optional": false
        },
        {
          "name": "pinned",
          "doc": "If true, this cave is ignored while checking for updates",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "InstallLocationSummary",
      "doc": "",
      "fields": [
        {
          "name": "id",
          "doc": "Unique identifier for this install location",
          "type": "string",
          "optional": false
        },
        {
          "name": "path",
          "doc": "Absolute path on disk for this install location",
          "type": "string",
          "optional": false
        },
        {
          "name": "sizeInfo",
          "doc": "Information about the size used and available at this install location",
          "type": "InstallLocationSizeInfo",
          "optional": false
        }
      ]
    },
    {
      "name": "InstallLocationSizeInfo",
      "doc": "",
      "fields": [
        {
          "name": "installedSize",
          "doc": "Number of bytes used by caves installed in this location",
          "type": "number",
          "optional": false
        },
        {
          "name": "freeSize",
          "doc": "Free space at this location (depends on the partition/disk on which\nit is), or a negative value if we can't find it",
          "type": "number",
          "optional": false
        },
        {
          "name": "totalSize",
          "doc": "Total space of this location (depends on the partition/disk on which\nit is), or a negative value if we can't find it",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "CavesFilters",
      "doc": "",
      "fields": [
        {
          "name": "classification",
          "doc": "",
          "type": "GameClassification",
          "optional": true
        },
        {
          "name": "gameId",
          "doc": "",
          "type": "number",
          "optional": true
        },
        {
          "name": "installLocationId",
          "doc": "",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "name": "InstallPlanInfo",
      "doc": "",
      "fields": [
        {
          "name": "upload",
          "doc": "",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "",
          "type": "Build",
          "optional": false
        },
        {
          "name": "type",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "diskUsage",
          "doc": "",
          "type": "DiskUsageInfo",
          "optional": false
        },
        {
          "name": "error",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "errorMessage",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "errorCode",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "DiskUsageInfo",
      "doc": "",
      "fields": [
        {
          "name": "finalDiskUsage",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "neededFreeSpace",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "accuracy",
          "doc": "",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "GameCredentials",
      "doc": "GameCredentials contains all the credentials required to make API requests\nincluding the download key if any.",
      "fields": [
        {
          "name": "apiKey",
          "doc": "A valid itch.io API key",
          "type": "string",
          "optional": false
        },
        {
          "name": "downloadKey",
          "doc": "A download key identifier, or 0 if no download key is available",
          "type": "number",
          "optional": true
        }
      ]
    },
    {
      "name": "Download",
      "doc": "Represents a download queued, which will be\nperformed whenever @@DownloadsDriveParams is called.",
      "fields": [
        {
          "name": "id",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "error",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "errorMessage",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "errorCode",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "reason",
          "doc": "",
          "type": "DownloadReason",
          "optional": false
        },
        {
          "name": "position",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "caveId",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "game",
          "doc": "",
          "type": "Game",
          "optional": false
        },
        {
          "name": "upload",
          "doc": "",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "",
          "type": "Build",
          "optional": false
        },
        {
          "name": "startedAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "finishedAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "stagingFolder",
          "doc": "",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "DownloadProgress",
      "doc": "",
      "fields": [
        {
          "name": "stage",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "progress",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "eta",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "bps",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "Host",
      "doc": "",
      "fields": [
        {
          "name": "runtime",
          "doc": "os + arch, e.g. windows-i386, linux-amd64",
          "type": "Runtime",
          "optional": false
        },
        {
          "name": "wrapper",
          "doc": "wrapper tool (wine, etc.) that butler can launch itself",
          "type": "Wrapper",
          "optional": false
        },
        {
          "name": "remoteLaunchName",
          "doc": "",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "Wrapper",
      "doc": "",
      "fields": [
        {
          "name": "beforeTarget",
          "doc": "wrapper {HERE} game.exe --launch-editor",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "betweenTargetAndArgs",
          "doc": "wrapper game.exe {HERE} --launch-editor",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "afterArgs",
          "doc": "wrapper game.exe --launch-editor {HERE}",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "wrapperBinary",
          "doc": "full path to the wrapper, like \"wine\"",
          "type": "string",
          "optional": false
        },
        {
          "name": "env",
          "doc": "additional environment variables",
          "type": "{ [key: string]: string }",
          "optional": false
        },
        {
          "name": "needRelativeTarget",
          "doc": "When this is true, the wrapper can't function like this:\n\n$ wine /path/to/game.exe\n\nIt needs to function like this:\n\n$ cd /path/to\n$ wine game.exe\n\nThis is at least true for wine, which cannot find required DLLs\notherwise. This might be true for other wrappers, so it's an option here.",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "Verdict",
      "doc": "A Verdict contains a wealth of information on how to \"launch\" or \"open\" a specific\nfolder.",
      "fields": [
        {
          "name": "basePath",
          "doc": "BasePath is the absolute path of the folder that was configured",
          "type": "string",
          "optional": false
        },
        {
          "name": "totalSize",
          "doc": "TotalSize is the size in bytes of the folder and all its children, recursively",
          "type": "number",
          "optional": false
        },
        {
          "name": "candidates",
          "doc": "Candidates is a list of potentially interesting files, with a lot of additional info",
          "type": "Candidate[]",
          "optional": false
        }
      ]
    },
    {
      "name": "Candidate",
      "doc": "A Candidate is a potentially interesting launch target, be it\na native executable, a Java or Love2D bundle, an HTML index, etc.",
      "fields": [
        {
          "name": "path",
          "doc": "Path is relative to the configured folder",
          "type": "string",
          "optional": false
        },
        {
          "name": "mode",
          "doc": "Mode describes file permissions",
          "type": "number",
          "optional": false
        },
        {
          "name": "depth",
          "doc": "Depth is the number of path elements leading up to this candidate",
          "type": "number",
          "optional": false
        },
        {
          "name": "flavor",
          "doc": "Flavor is the type of a candidate - native, html, jar etc.",
          "type": "Flavor",
          "optional": false
        },
        {
          "name": "arch",
          "doc": "Arch describes the architecture of a candidate (where relevant)",
          "type": "Arch",
          "optional": false
        },
        {
          "name": "size",
          "doc": "Size is the size of the candidate's file, in bytes",
          "type": "number",
          "optional": false
        },
        {
          "name": "spell",
          "doc": "Spell contains raw output from \u003chttps://github.com/itchio/wizardry\u003e",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "windowsInfo",
          "doc": "WindowsInfo contains information specific to native Windows candidates",
          "type": "WindowsInfo",
          "optional": true
        },
        {
          "name": "linuxInfo",
          "doc": "LinuxInfo contains information specific to native Linux candidates",
          "type": "LinuxInfo",
          "optional": true
        },
        {
          "name": "macosInfo",
          "doc": "MacosInfo contains information specific to native macOS candidates",
          "type": "MacosInfo",
          "optional": true
        },
        {
          "name": "loveInfo",
          "doc": "LoveInfo contains information specific to Love2D bundles (`.love` files)",
          "type": "LoveInfo",
          "optional": true
        },
        {
          "name": "scriptInfo",
          "doc": "ScriptInfo contains information specific to shell scripts (`.sh`, `.bat` etc.)",
          "type": "ScriptInfo",
          "optional": true
        },
        {
          "name": "jarInfo",
          "doc": "JarInfo contains information specific to Java archives (`.jar` files)",
          "type": "JarInfo",
          "optional": true
        }
      ]
    },
    {
      "name": "WindowsInfo",
      "doc": "Contains information specific to native windows executables\nor installer packages.",
      "fields": [
        {
          "name": "installerType",
          "doc": "Particular type of installer (msi, inno, etc.)",
          "type": "WindowsInstallerType",
          "optional": true
        },
        {
          "name": "uninstaller",
          "doc": "True if we suspect this might be an uninstaller rather than an installer",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "gui",
          "doc": "Is this executable marked as GUI? This can be false and still pop a GUI, it's just a hint.",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "dotNet",
          "doc": "Is this a .NET assembly?",
          "type": "boolean",
          "optional": true
        }
      ]
    },
    {
      "name": "MacosInfo",
      "doc": "Contains information specific to native macOS executables\nor app bundles.",
      "fields": null
    },
    {
      "name": "LinuxInfo",
      "doc": "Contains information specific to native Linux executables",
      "fields": null
    },
    {
      "name": "LoveInfo",
      "doc": "Contains information specific to Love2D bundles",
      "fields": [
        {
          "name": "version",
          "doc": "The version of love2D required to open this bundle. May be empty",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "name": "ScriptInfo",
      "doc": "Contains information specific to shell scripts",
      "fields": [
        {
          "name": "interpreter",
          "doc": "Something like `/bin/bash`",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "name": "JarInfo",
      "doc": "Contains information specific to Java archives",
      "fields": [
        {
          "name": "mainClass",
          "doc": "The main Java class as specified by the manifest included in the .jar (if any)",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "name": "User",
      "doc": "User represents an itch.io account, with basic profile info",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "username",
          "doc": "The user's username (used for login)",
          "type": "string",
          "optional": false
        },
        {
          "name": "displayName",
          "doc": "The user's display name: human-friendly, may contain spaces, unicode etc.",
          "type": "string",
          "optional": false
        },
        {
          "name": "developer",
          "doc": "Has the user opted into creating games?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "pressUser",
          "doc": "Is the user part of itch.io's press program?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "url",
          "doc": "The address of the user's page on itch.io",
          "type": "string",
          "optional": false
        },
        {
          "name": "coverUrl",
          "doc": "User's avatar, may be a GIF",
          "type": "string",
          "optional": false
        },
        {
          "name": "stillCoverUrl",
          "doc": "Static version of user's avatar, only set if the main cover URL is a GIF",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "Game",
      "doc": "Game represents a page on itch.io, it could be a game,\na tool, a comic, etc.",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "url",
          "doc": "Canonical address of the game's page on itch.io",
          "type": "string",
          "optional": false
        },
        {
          "name": "title",
          "doc": "Human-friendly title (may contain any character)",
          "type": "string",
          "optional": false
        },
        {
          "name": "shortText",
          "doc": "Human-friendly short description",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "doc": "Downloadable game, html game, etc.",
          "type": "GameType",
          "optional": false
        },
        {
          "name": "classification",
          "doc": "Classification: game, tool, comic, etc.",
          "type": "GameClassification",
          "optional": false
        },
        {
          "name": "embed",
          "doc": "Configuration for embedded (HTML5) games",
          "type": "GameEmbedData",
          "optional": true
        },
        {
          "name": "coverUrl",
          "doc": "Cover url (might be a GIF)",
          "type": "string",
          "optional": false
        },
        {
          "name": "stillCoverUrl",
          "doc": "Non-gif cover url, only set if main cover url is a GIF",
          "type": "string",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date the game was created",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "publishedAt",
          "doc": "Date the game was published, empty if not currently published",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "minPrice",
          "doc": "Price in cents of a dollar",
          "type": "number",
          "optional": false
        },
        {
          "name": "canBeBought",
          "doc": "Are payments accepted?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "hasDemo",
          "doc": "Does this game have a demo available?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "inPressSystem",
          "doc": "Is this game part of the itch.io press system?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "platforms",
          "doc": "Platforms this game is available for",
          "type": "Platforms",
          "optional": false
        },
        {
          "name": "user",
          "doc": "The user account this game is associated to",
          "type": "User",
          "optional": true
        },
        {
          "name": "userId",
          "doc": "ID of the user account this game is associated to",
          "type": "number",
          "optional": false
        },
        {
          "name": "sale",
          "doc": "The best current sale for this game",
          "type": "Sale",
          "optional": true
        },
        {
          "name": "viewsCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "downloadsCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "purchasesCount",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "published",
          "doc": "",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "Platforms",
      "doc": "Platforms describes which OS/architectures a game or upload\nis compatible with.",
      "fields": [
        {
          "name": "windows",
          "doc": "",
          "type": "Architectures",
          "optional": false
        },
        {
          "name": "linux",
          "doc": "",
          "type": "Architectures",
          "optional": false
        },
        {
          "name": "osx",
          "doc": "",
          "type": "Architectures",
          "optional": false
        }
      ]
    },
    {
      "name": "GameEmbedData",
      "doc": "GameEmbedData contains presentation information for embed games",
      "fields": [
        {
          "name": "gameId",
          "doc": "Game this embed info is for",
          "type": "number",
          "optional": false
        },
        {
          "name": "width",
          "doc": "width of the initial viewport, in pixels",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "doc": "height of the initial viewport, in pixels",
          "type": "number",
          "optional": false
        },
        {
          "name": "fullscreen",
          "doc": "for itch.io website, whether or not a fullscreen button should be shown",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "Sale",
      "doc": "Sale describes a discount for a game.",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "gameId",
          "doc": "Game this sale is for",
          "type": "number",
          "optional": false
        },
        {
          "name": "rate",
          "doc": "Discount rate in percent.\nCan be negative, see https://itch.io/updates/introducing-reverse-sales",
          "type": "number",
          "optional": false
        },
        {
          "name": "startDate",
          "doc": "Timestamp the sale started at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "endDate",
          "doc": "Timestamp the sale ends at",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "Upload",
      "doc": "An Upload is a downloadable file. Some are wharf-enabled, which means\nthey're actually a \"channel\" that may contain multiple builds, pushed\nwith \u003chttps://github.com/itchio/butler\u003e",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "storage",
          "doc": "Storage (hosted, external, etc.)",
          "type": "UploadStorage",
          "optional": false
        },
        {
          "name": "host",
          "doc": "Host (if external storage)",
          "type": "string",
          "optional": false
        },
        {
          "name": "filename",
          "doc": "Original file name (example: `Overland_x64.zip`)",
          "type": "string",
          "optional": false
        },
        {
          "name": "displayName",
          "doc": "Human-friendly name set by developer (example: `Overland for Windows 64-bit`)",
          "type": "string",
          "optional": false
        },
        {
          "name": "size",
          "doc": "Size of upload in bytes. For wharf-enabled uploads, it's the archive size.",
          "type": "number",
          "optional": false
        },
        {
          "name": "channelName",
          "doc": "Name of the wharf channel for this upload, if it's a wharf-enabled upload",
          "type": "string",
          "optional": false
        },
        {
          "name": "build",
          "doc": "Latest build for this upload, if it's a wharf-enabled upload",
          "type": "Build",
          "optional": false
        },
        {
          "name": "buildId",
          "doc": "ID of the latest build for this upload, if it's a wharf-enabled upload",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "doc": "Upload type: default, soundtrack, etc.",
          "type": "UploadType",
          "optional": false
        },
        {
          "name": "preorder",
          "doc": "Is this upload a pre-order placeholder?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "demo",
          "doc": "Is this upload a free demo?",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "platforms",
          "doc": "Platforms this upload is compatible with",
          "type": "Platforms",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date this upload was created at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "Date this upload was last updated at (order changed, display name set, etc.)",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "Collection",
      "doc": "A Collection is a set of games, curated by humans.",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "title",
          "doc": "Human-friendly title for collection, for example `Couch coop games`",
          "type": "string",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date this collection was created at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "Date this collection was last updated at (item added, title set, etc.)",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "gamesCount",
          "doc": "Number of games in the collection. This might not be accurate\nas some games might not be accessible to whoever is asking (project\npage deleted, visibility level changed, etc.)",
          "type": "number",
          "optional": false
        },
        {
          "name": "collectionGames",
          "doc": "Games in this collection, with additional info",
          "type": "CollectionGame[]",
          "optional": false
        },
        {
          "name": "userId",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "user",
          "doc": "",
          "type": "User",
          "optional": false
        }
      ]
    },
    {
      "name": "CollectionGame",
      "doc": "CollectionGame represents a game's membership for a collection.",
      "fields": [
        {
          "name": "collectionId",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "collection",
          "doc": "",
          "type": "Collection",
          "optional": false
        },
        {
          "name": "gameId",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "game",
          "doc": "",
          "type": "Game",
          "optional": false
        },
        {
          "name": "position",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "blurb",
          "doc": "",
          "type": "string",
          "optional": false
        },
        {
          "name": "userId",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "DownloadKey",
      "doc": "A DownloadKey is often generated when a purchase is made, it\nallows downloading uploads for a game that are not available\nfor free. It can also be generated by other means.",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "gameId",
          "doc": "Identifier of the game to which this download key grants access",
          "type": "number",
          "optional": false
        },
        {
          "name": "game",
          "doc": "Game to which this download key grants access",
          "type": "Game",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date this key was created at (often coincides with purchase time)",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "Date this key was last updated at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "ownerId",
          "doc": "Identifier of the itch.io user to which this key belongs",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "Build",
      "doc": "Build contains information about a specific build",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "parentBuildId",
          "doc": "Identifier of the build before this one on the same channel,\nor 0 if this is the initial build.",
          "type": "number",
          "optional": false
        },
        {
          "name": "state",
          "doc": "State of the build: started, processing, etc.",
          "type": "BuildState",
          "optional": false
        },
        {
          "name": "version",
          "doc": "Automatically-incremented version number, starting with 1",
          "type": "number",
          "optional": false
        },
        {
          "name": "userVersion",
          "doc": "Value specified by developer with `--userversion` when pushing a build\nMight not be unique across builds of a given channel.",
          "type": "string",
          "optional": false
        },
        {
          "name": "files",
          "doc": "Files associated with this build - often at least an archive,\na signature, and a patch. Some might be missing while the build\nis still processing or if processing has failed.",
          "type": "BuildFile[]",
          "optional": false
        },
        {
          "name": "user",
          "doc": "User who pushed the build",
          "type": "User",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Timestamp the build was created at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "Timestamp the build was last updated at",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "BuildFile",
      "doc": "BuildFile contains information about a build's \"file\", which could be its\narchive, its signature, its patch, etc.",
      "fields": [
        {
          "name": "id",
          "doc": "Site-wide unique identifier generated by itch.io",
          "type": "number",
          "optional": false
        },
        {
          "name": "size",
          "doc": "Size of this build file",
          "type": "number",
          "optional": false
        },
        {
          "name": "state",
          "doc": "State of this file: created, uploading, uploaded, etc.",
          "type": "BuildFileState",
          "optional": false
        },
        {
          "name": "type",
          "doc": "Type of this build file: archive, signature, patch, etc.",
          "type": "BuildFileType",
          "optional": false
        },
        {
          "name": "subType",
          "doc": "Subtype of this build file, usually indicates compression",
          "type": "BuildFileSubType",
          "optional": false
        },
        {
          "name": "createdAt",
          "doc": "Date this build file was created at",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "updatedAt",
          "doc": "Date this build file was last updated at",
          "type": "RFCDate",
          "optional": false
        }
      ]
    },
    {
      "name": "InstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "type",
          "doc": "",
          "type": "InstallEventType",
          "optional": false
        },
        {
          "name": "timestamp",
          "doc": "",
          "type": "RFCDate",
          "optional": false
        },
        {
          "name": "heal",
          "doc": "",
          "type": "HealInstallEvent",
          "optional": false
        },
        {
          "name": "install",
          "doc": "",
          "type": "InstallInstallEvent",
          "optional": false
        },
        {
          "name": "upgrade",
          "doc": "",
          "type": "UpgradeInstallEvent",
          "optional": false
        },
        {
          "name": "ghostBusting",
          "doc": "",
          "type": "GhostBustingInstallEvent",
          "optional": false
        },
        {
          "name": "patching",
          "doc": "",
          "type": "PatchingInstallEvent",
          "optional": false
        },
        {
          "name": "problem",
          "doc": "",
          "type": "ProblemInstallEvent",
          "optional": false
        },
        {
          "name": "fallback",
          "doc": "",
          "type": "FallbackInstallEvent",
          "optional": false
        }
      ]
    },
    {
      "name": "InstallInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "manager",
          "doc": "",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "HealInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "totalCorrupted",
          "doc": "",
          "type": "number",
          "optional": false
        },
        {
          "name": "appliedCaseFixes",
          "doc": "",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "UpgradeInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "numPatches",
          "doc": "",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "ProblemInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "error",
          "doc": "Short error",
          "type": "string",
          "optional": false
        },
        {
          "name": "errorStack",
          "doc": "Longer error",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "FallbackInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "attempted",
          "doc": "Name of the operation we were trying to do",
          "type": "string",
          "optional": false
        },
        {
          "name": "problem",
          "doc": "Problem encountered while trying \"attempted\"",
          "type": "ProblemInstallEvent",
          "optional": false
        },
        {
          "name": "nowTrying",
          "doc": "Name of the operation we're falling back to",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "PatchingInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "buildID",
          "doc": "Build we patched to",
          "type": "number",
          "optional": false
        },
        {
          "name": "subtype",
          "doc": "\"default\" or \"optimized\" (for the +bsdiff variant)",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "GhostBustingInstallEvent",
      "doc": "",
      "fields": [
        {
          "name": "operation",
          "doc": "Operation that requested the ghost busting (install, upgrade, heal)",
          "type": "string",
          "optional": false
        },
        {
          "name": "found",
          "doc": "Number of ghost files found",
          "type": "number",
          "optional": false
        },
        {
          "name": "removed",
          "doc": "Number of ghost files removed",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "Receipt",
      "doc": "A Receipt describes what was installed to a specific folder.\n\nIt's compressed and written to `./.itch/receipt.json.gz` every\ntime an install operation completes successfully, and is used\nin further install operations to make sure ghosts are busted and/or\nangels are saved.",
      "fields": [
        {
          "name": "game",
          "doc": "The itch.io game installed at this location",
          "type": "Game",
          "optional": false
        },
        {
          "name": "upload",
          "doc": "The itch.io upload installed at this location",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "The itch.io build installed at this location. Null for non-wharf upload.",
          "type": "Build",
          "optional": false
        },
        {
          "name": "files",
          "doc": "A list of installed files (slash-separated paths, relative to install folder)",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "installerName",
          "doc": "The installer used to install at this location",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "name": "Manifest",
      "doc": "A Manifest describes prerequisites (dependencies) and actions that\ncan be taken while launching a game.",
      "fields": [
        {
          "name": "actions",
          "doc": "Actions are a list of options to give the user when launching a game.",
          "type": "Actions",
          "optional": false
        },
        {
          "name": "prereqs",
          "doc": "Prereqs describe libraries or frameworks that must be installed\nprior to launching a game",
          "type": "Prereq[]",
          "optional": false
        }
      ]
    },
    {
      "name": "Action",
      "doc": "An Action is a choice for the user to pick when launching a game.\n\nsee https://itch.io/docs/itch/integrating/manifest.html",
      "fields": [
        {
          "name": "name",
          "doc": "human-readable or standard name",
          "type": "string",
          "optional": false
        },
        {
          "name": "path",
          "doc": "file path (relative to manifest or absolute), URL, etc.",
          "type": "string",
          "optional": false
        },
        {
          "name": "icon",
          "doc": "icon name (see static/fonts/icomoon/demo.html, don't include `icon-` prefix)",
          "type": "string",
          "optional": false
        },
        {
          "name": "args",
          "doc": "command-line arguments",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "sandbox",
          "doc": "sandbox opt-in",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "scope",
          "doc": "requested API scope",
          "type": "string",
          "optional": false
        },
        {
          "name": "console",
          "doc": "don't redirect stdout/stderr, open in new console window",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "platform",
          "doc": "platform to restrict this action to",
          "type": "Platform",
          "optional": false
        },
        {
          "name": "locales",
          "doc": "localized action name",
          "type": "{ [key: string]: ActionLocale }",
          "optional": false
        }
      ]
    },
    {
      "name": "Prereq",
      "doc": "",
      "fields": [
        {
          "name": "name",
          "doc": "A prerequisite to be installed, see \u003chttps://itch.io/docs/itch/integrating/prereqs/\u003e for the full list.",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "ActionLocale",
      "doc": "",
      "fields": [
        {
          "name": "name",
          "doc": "A localized action name",
          "type": "string",
          "optional": false
        }
      ]
    },
    {
      "name": "Runtime",
      "doc": "Runtime describes an os-arch combo in a convenient way",
      "fields": [
        {
          "name": "platform",
          "doc": "",
          "type": "Platform",
          "optional": false
        },
        {
          "name": "is64",
          "doc": "",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "name": "InstallResult",
      "doc": "What was installed by a subtask of @@OperationStartParams.\n\nSee @@TaskSucceededNotification.",
      "fields": [
        {
          "name": "game",
          "doc": "The game we installed",
          "type": "Game",
          "optional": false
        },
        {
          "name": "upload",
          "doc": "The upload we installed",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "The build we installed",
          "type": "Build",
          "optional": true
        }
      ]
    },
    {
      "name": "GameUpdate",
      "doc": "Describes an available update for a particular game install.",
      "fields": [
        {
          "name": "caveId",
          "doc": "Cave we found an update for",
          "type": "string",
          "optional": false
        },
        {
          "name": "game",
          "doc": "Game we found an update for",
          "type": "Game",
          "optional": false
        },
        {
          "name": "direct",
          "doc": "True if this is a direct update, ie. we're on\na channel that still exists, and there's a new build\nFalse if it's an indirect update, for example a new\nupload that appeared after we installed, but we're\nnot sure if it's an upgrade or other additional content",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "choices",
          "doc": "Available choice of updates",
          "type": "GameUpdateChoice[]",
          "optional": false
        }
      ]
    },
    {
      "name": "GameUpdateChoice",
      "doc": "One possible upload/build choice to upgrade a cave",
      "fields": [
        {
          "name": "upload",
          "doc": "Upload to be installed",
          "type": "Upload",
          "optional": false
        },
        {
          "name": "build",
          "doc": "Build to be installed (may be nil)",
          "type": "Build",
          "optional": false
        },
        {
          "name": "confidence",
          "doc": "How confident we are that this is the right upgrade",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "PrereqTask",
      "doc": "Information about a prerequisite task.",
      "fields": [
        {
          "name": "fullName",
          "doc": "Full name of the prerequisite, for example: `Microsoft .NET Framework 4.6.2`",
          "type": "string",
          "optional": false
        },
        {
          "name": "order",
          "doc": "Order of task in the list. Respect this order in the UI if you want consistent progress indicators.",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "name": "CleanDownloadsEntry",
      "doc": "",
      "fields": [
        {
          "name": "path",
          "doc": "The complete path of the file or folder we intend to remove",
          "type": "string",
          "optional": false
        },
        {
          "name": "size",
          "doc": "The size of the folder or file, in bytes",
          "type": "number",
          "optional": false
        }
      ]
    }
  ],
  "enumTypes": null
}
